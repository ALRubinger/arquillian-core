<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="containers">
   <title>Target containers</title>

   <para>
      Arquillian's forte is not only in its ease of use, but also in its flexibility. Good integration testing is not
      just about testing in <emphasis>any</emphasis> container, but rather testing in the container
      <emphasis>you</emphasis> are targeting.  It's all too easy to kid ourselves by validating components in a
      specialized testing container, only to realize that the small variations causes the components fail when it comes
      time to deploy to the application for real. To make tests count, you want to execute them in the real container.
   </para>

   <para>
      Arquillian supports a variety of target containers out of the box, which will be covered in this chapter. If the
      container you are using isn't supported, Arquillian makes it very easy to plug in your own implementation.
   </para>

   <section>
      <title>Container varieties</title>

      <para>
         There are two styles of containers that you can target in Arquillian:
      </para> 

      <orderedlist>
         <listitem>
            <para>remote &#8212; resides in a separate JVM from the test runner; its lifecycle may be managed by Arquillian,
            or Arquillian may bind to a container that is already started</para>
         </listitem>
         <listitem>
            <para>embedded &#8212; resides in the same JVM as the test runner; its lifecycle is likely managed by Arquillian</para>
         </listitem>
      </orderedlist>

      <para>
         Containers can be further classified by their capabilities. There are three common catagories:
      </para>

      <orderedlist>
         <listitem>
            <para>A fully compliant Java EE application server (e.g., GlassFish, JBoss AS, Embedded GlassFish)</para>
         </listitem>
         <listitem>
            <para>A Servlet container (e.g., Jetty, Tomcat)</para>
         </listitem>
         <listitem>
            <para>A standalone bean container (e.g., Weld SE, Spring)</para>
         </listitem>
      </orderedlist>

      <para>
         Arquillian provides SPIs that handle each of the tasks involved in controlling the runtime environment,
         executing the tests and aggregating the results. So in theory, you can support just about any environment that
         can be controlled with the set of hooks you are given.
      </para>

   </section>

   <section>
      <title>Supported containers</title>

      <para>
         The implementations provided so far are shown in the table below. Also listed is the artifactId of the JAR that
         provides the implementation. To execute your tests against a container, you must include the artifactId that
         corresponds to that container on the classpath. Use the following Maven profile definition as a template to add
         support for a container to your Maven build, replacing %artifactId% with the artifactId from the table. You
         then activate the profile when executing the tests just as you did in the <xref linkend="gettingstarted"/>
         chapter.
      </para>

      <programlisting role="XML"><![CDATA[<profile>
   <id>%artifactId%</id>
   <dependencies>
      <dependency>
         <groupId>org.jboss.arquillian.container</groupId>
         <artifactId>%artifactId%</artifactId>
         <version>${arquillian.version}</version>
      </dependency>
   </dependencies>
</profile>]]></programlisting>

      <table frame="all">
         <title>Target containers supported by Arquillian</title>
         <tgroup cols="4">
            <colspec colnum="1" colname="name" colwidth="1*"/>
            <colspec colnum="2" colname="type" colwidth="1*"/>
            <colspec colnum="3" colname="compliance" colwidth="1*"/>
            <colspec colnum="4" colname="artifactId" colwidth="1*"/>
            <thead>
               <row>
                  <entry>Container name</entry>
                  <entry>Container type</entry>
                  <entry>Spec compliance</entry>
                  <entry>artifactId</entry>
               </row>
            </thead>
            <tbody>
               <row>
                 <entry>JBoss AS 5.1</entry>
                 <entry>remote</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-remote-51</entry>
               </row>
               <row>
                 <entry>JBoss AS 6.0 M1</entry>
                 <entry>remote</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-remote-60</entry>
               </row>
<!-- 
               <row>
                 <entry>JBoss Embedded AS</entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-embedded-60</entry>
               </row>
-->               
               <row>
                 <entry>Embedded GlassFish V3</entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-glassfish-embedded-30</entry>
               </row>
               <row>
                 <entry>Weld SE</entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-weld-embedded</entry>
               </row>
               <row>
                 <entry>Apache OpenEJB</entry>
                 <entry>embedded</entry>
                 <entry>EJB 3.0</entry>
                 <entry>arquillian-openejb</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>
         Support for other containers is planned, including GlassFish V3(remote), Tomcat and Jetty. We don't have plans to
         provide implementations for Spring or Guice at this time, but we welcome a contribution from the community,
         because it's certainly possible.
      </para>

   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
