<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="containers">
   <title>Target containers</title>

   <para>
      Arquillian's forte is not only in its ease of use, but also in its flexibility. Good integration testing is not
      just about testing in <emphasis>any</emphasis> container, but rather testing in the container
      <emphasis>you</emphasis> are targeting.  It's all too easy to kid ourselves by validating components in a
      specialized testing container, only to realize that the small variations causes the components fail when it comes
      time to deploy to the application for real. To make tests count, you want to execute them in the real container.
   </para>

   <para>
      Arquillian supports a variety of target containers out of the box, which will be covered in this chapter. If the
      container you are using isn't supported, Arquillian makes it very easy to plug in your own implementation.
   </para>

   <section>
      <title>Container varieties</title>

      <para>
         There are two styles of containers that you can target in Arquillian:
      </para> 

      <orderedlist>
         <listitem>
            <para>remote &#8212; resides in a separate JVM from the test runner; its lifecycle may be managed by Arquillian,
            or Arquillian may bind to a container that is already started</para>
         </listitem>
         <listitem>
            <para>embedded &#8212; resides in the same JVM as the test runner; its lifecycle is likely managed by Arquillian</para>
         </listitem>
      </orderedlist>

      <para>
         Containers can be further classified by their capabilities. There are three common catagories:
      </para>

      <orderedlist>
         <listitem>
            <para>A fully compliant Java EE application server (e.g., GlassFish, JBoss AS, Embedded GlassFish)</para>
         </listitem>
         <listitem>
            <para>A Servlet container (e.g., Jetty, Tomcat)</para>
         </listitem>
         <listitem>
            <para>A standalone bean container (e.g., Weld SE, Spring)</para>
         </listitem>
      </orderedlist>

      <para>
         Arquillian provides SPIs that handle each of the tasks involved in controlling the runtime environment,
         executing the tests and aggregating the results. So in theory, you can support just about any environment that
         can be controlled with the set of hooks you are given.
      </para>

   </section>

   <section>
      <title>Supported containers</title>

      <para>
         The implementations provided so far are shown in the table below. Also listed is the artifactId of the JAR that
         provides the implementation. To execute your tests against a container, you must include the artifactId that
         corresponds to that container on the classpath. Use the following Maven profile definition as a template to add
         support for a container to your Maven build, replacing %artifactId% with the artifactId from the table. You
         then activate the profile when executing the tests just as you did in the <xref linkend="gettingstarted"/>
         chapter.
      </para>

      <programlisting role="XML"><![CDATA[<profile>
   <id>%artifactId%</id>
   <dependencies>
      <dependency>
         <groupId>org.jboss.arquillian.container</groupId>
         <artifactId>%artifactId%</artifactId>
         <version>${arquillian.version}</version>
      </dependency>
   </dependencies>
</profile>]]></programlisting>

      <table frame="all">
         <title>Target containers supported by Arquillian</title>
         <tgroup cols="4">
            <colspec colnum="1" colname="name" colwidth="1*"/>
            <colspec colnum="2" colname="type" colwidth="1*"/>
            <colspec colnum="3" colname="compliance" colwidth="1*"/>
            <colspec colnum="4" colname="artifactId" colwidth="1*"/>
            <thead>
               <row>
                  <entry>Container name</entry>
                  <entry>Container type</entry>
                  <entry>Spec compliance</entry>
                  <entry>artifactId</entry>
               </row>
            </thead>
            <tbody>
               <row>
                 <entry><link linkend="container.jbossas-remote-51">JBoss AS 5.1</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-remote-51</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-local-51">JBoss AS 5.1</link></entry>
                 <entry>remote + lifecycle</entry>
                 <entry>Java EE 5</entry>
                 <entry>arquillian-jbossas-local-51</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-remote-60">JBoss AS 6.0 M3</link></entry>
                 <entry>remote</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-remote-60</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-local-60">JBoss AS 6.0 M3</link></entry>
                 <entry>remote + lifecycle</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-local-60</entry>
               </row>
               <row>
                 <entry><link linkend="container.jbossas-embedded-60">JBoss Embedded AS 6.0 M3</link></entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-jbossas-embedded-60</entry>
               </row>
               <row>
                 <entry><link linkend="container.reloaded">JBoss Reloaded</link></entry>
                 <entry>embedded</entry>
                 <entry>JBoss MC</entry>
                 <entry>arquillian-reloaded</entry>
               </row>
               <row>
                 <entry><link linkend="container.glassfish-embedded30">GlassFish Embedded 3.0</link></entry>
                 <entry>embedded</entry>
                 <entry>Java EE 6</entry>
                 <entry>arquillian-glassfish-embedded-30</entry>
               </row>
               <row>
                 <entry><link linkend="container.weld-embedded">Weld SE</link></entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-weld-embedded</entry>
               </row>
               <row>
                 <entry><link linkend="container.openwebbeans-embedded">Apache OpenWebBeans</link></entry>
                 <entry>embedded</entry>
                 <entry>CDI</entry>
                 <entry>arquillian-openwebbeans-embedded</entry>
               </row>
               <row>
                 <entry><link linkend="container.openejb-embedded">Apache OpenEJB</link></entry>
                 <entry>embedded</entry>
                 <entry>EJB 3.0</entry>
                 <entry>arquillian-openejb</entry>
               </row>
            </tbody>
         </tgroup>
      </table>

      <para>
         Support for other containers is planned, including GlassFish V3(remote), Weblogic(remote), OSGI, 
         Tomcat, Jetty, Hibernate and JBoss JCA Embedded. 
      </para>

   </section>

	<section id="containers.configuration">
		<title>Container configuration</title>
		
		<para>
			You can come a long way with default values, but at some point you may need to customize some of the container 
			settings to fit your environment. We're going to have a look at how this can be done with Arquillian. 
			Arquillian will look for a file named <filename>arquillian.xml</filename> in the root of your classpath. 
			If it exists it will be auto loaded, else default values will be used. So this file is not a requirement.
		</para>
		
		<para>
			Lets imagine that we're working for the company example.com and in our environment we have two servers; 
			test.example.com and hudson.example.com. test.example.com is the JBoss instance we use for our integration
			tests and hudson.example.com is our continuous integration server that we want to run our integration suite
			from. You do want continuous integration testing, right? All containers default to localhost, so we obviously 
			can't have that if we want to test against our remote test server. 
		</para>
		
		<programlisting role="XML"><![CDATA[<?xml version="1.0"?>
	
<arquillian xmlns="http://jboss.com/arquillian"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jboss="urn:arq:org.jboss.arquillian.jbossas.remote60">

	<engine>
		<deploymentExportPath>/tmp</deploymentExportPath>
	</engine>
	
	<jboss:container>
		<jboss:remoteServerAddress>test.example.com</jboss:remoteServerAddress>
		<jboss:remoteServerHttpPort>8181</jboss:remoteServerHttpPort>
		<jboss:localDeploymentBindAddress>hudson.example.com</jboss:localDeploymentBindAddress>
		<jboss:localDeploymentBindPort>7000</jboss:localDeploymentBindPort>
	</jboss:container>	

</arquillian>]]></programlisting>
		
		<para>
			That should do it! What we have done here is to declare a XML namespace using the defined name for the 
			JBoss AS 6.0 Remote container. This is needed by Arquillian to know which ContainerConfiguraiton your trying to 
			create. Next step is to create a <emphasis>container</emphasis> element in that namespace and add the options you 
			want to configure inside. In this example we're saying that the server we want to test against can be found on
			address test.example.com using port 8181, and the remote server can communicate back to us on address hudson.example.com
			on port 7000. The callback is needed by some containers as a way of transferring the deployment 
			to the remote server, the deployment initialization is then based on URLs. 
		</para>
		
		<tip>
			For a complete overview of all the containers and their configuration options, 
			see <xref linkend="container.reference"/>
		</tip>
		
		<warning>
			Some containers require a jndi.properties file on classpath with the containers standard
			JNDI properties for the initial connection.
		</warning>
	</section>
<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
