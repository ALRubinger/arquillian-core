<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>

<chapter id="configuration">
	<title>Configuration</title>
	
	<para>
		You can come a long way with default values, but at some point you may need to customize some of the container 
		settings to fit your environment. We're going to have a look at how this can be done with Arquillian. 
		Arquillian will look for a file named <filename>arquillian.xml</filename> in the root of your classpath. 
		If it exists it will be auto loaded, else default values be used. So this file is not a requirement.
	</para>
	
	<para>
		Lets imagine that we're working for the company example.com and in our environment we have two servers; 
		test.example.com and hudson.example.com. test.example.com is the JBoss instance we use for our integration
		tests and hudson.example.com is our continuous integration server that we want to run our integration suite
		from. You do want continuous integration testing, right? All containers default to localhost, so we obviously 
		can't have that if we want to test against our test.example.com server. 
	</para>
	
	<programlisting role="XML"><![CDATA[<?xml version="1.0"?>

<arquillian xmlns="http://jboss.com/arquillian"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jboss="urn:arq:org.jboss.arquillian.jbossas.remote60">

	<engine>
		<deploymentExportPath>/tmp</deploymentExportPath>
	</engine>
	
	<jboss:container>
		<remoteServerAddress>test.example.com</remoteServerAddress>
		<remoteServerHttpPort>8181</remoteServerHttpPort>
		<localDeploymentBindAddress>hudson.example.com</localDeploymentBindAddress>
		<localDeploymentBindPort>7000</localDeploymentBindPort>
	</jboss:container>	

</arquillian>]]></programlisting>
	
	<para>
		That should do it! What we have done here is to declare a XML namespace using the defined name for the 
		JBoss AS 6.0 Remote container. This is needed by Arquillian to know which ContainerConfiguraiton your trying to 
		create. Next step is to create a <emphasis>container</emphasis> element in that namespace and add the options you 
		want to configure inside. In this example we're saying that the server we want to test against can be found on
		address test.example.com using port 8181, and the remote server can communicate back to us on address hudson.example.com
		on port 7000. The callback is needed by some containers as a way of transferring the deployment 
		to the remote server, the deployment initialization is then based on URLs. 
	</para>
	
	<tip>
		For a complete overview of all the containers and their configuration options, 
		see <xref linkend="container.reference"/>
	</tip>
	
	<warning>
		Some containers require a jndi.properties file on classpath with the containers standard
		JNDI properties for the initial connection.
	</warning>
</chapter>