<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="enrichment">
   <title>Test enrichment</title>

   <para>
      When you use a unit testing framework like JUnit or TestNG, your test case lives in a world all its own. That
      makes integration testing pretty difficult because it means the environment in which the business logic
      executes must be self-contained within the scope of the test case (whether at the suite, class or method
      level). The onus of setting up this environment in the test falls on the developer's shoulders.
   </para>

   <para>
      With Arquillian, you no longer have to worry about setting up the execution environment because that is all
      handled for you. The test will either be running in a container or a local CDI environment. But you still
      need some way to hook your test into this environment.
   </para>

   <para>
      A key part of in-container integration testing is getting access the container-managed components that you plan to
      test. Using the Java new operator to instantiate the business class is not suitable in this testing scenario
      because it leaves out the declaratives services that get applied to the component at runtime. We want the real
      deal. Arquillian uses test enrichment to give us access to the real deal. The visible result of test enrichment is
      injection of container resources and beans directly into the test class.
   </para>

   <section>
      <title>Injection into the test case</title>

      <para>
         Before Arquillian negotiates the execution of the test, it enriches the test class by satisfying injection
         points specified declaratively using annotations. There are three injection-based enrichers provided by
         Arquillian out of the box:
      </para>

      <itemizedlist>
         <listitem>
            <para><literal>@Resource</literal> - Java EE resource injections</para>
         </listitem>
         <listitem>
            <para><literal>@EJB</literal> - EJB session bean reference injections</para>
         </listitem>
         <listitem>
            <para><literal>@Inject</literal> - CDI injections</para>
         </listitem>
      </itemizedlist>

      <para>
         The first two enrichers use JNDI to lookup the instance to inject. The CDI injections are handled by treating
         the test class as a bean capable of receiving standard CDI injections.
      </para>

      <para>
         The <literal>@Resource</literal> annotation gives you access to any object which is available via JNDI. It follows
         the standard rules for <literal>@Resource</literal> (as defined in the Section 2.3 of the Common Annotations for 
         the Java Platform specification).
      </para>

      <para>
         The <literal>@EJB</literal> annotation performs a JNDI lookup for the EJB session bean reference using the
         following equation in the specified order:
      </para>
      
      <programlisting>"java:global/test.ear/test/" + unqualified interface name + "Bean"</programlisting>
      <programlisting>"test/" + unqualified interface name + "Bean/local"</programlisting>
      <programlisting>"test/" + unqualified interface name + "Bean/remote"</programlisting>
      
      <para>
         If no matching beans were found in those locations the injection will fail.
      </para>

      <warning>
         <para>
            At the moment, the lookup for an EJB session reference relies on a common naming convention of EJB beans.
            In the future the lookup will rely on the standard JNDI naming conventions established in Java EE 6.
         </para>
      </warning>

      <para>
         In order for CDI injections to work, the test archive defined with ShrinkWrap must be a bean archive. That
         means adding beans.xml to the META-INF directory. Here's a <literal>@Deployment</literal> method that shows
         one way to add a beans.xml to the archive:
      </para>

      <programlisting role="JAVA"><![CDATA[@Deployment
public static JavaArchive createTestArchive() {
   return Archives.create("test.jar", JavaArchive.class)
      .addClass(NameOfClassUnderTest.class)
      .addManifestResource(new ByteArrayAsset(new byte[0]), Paths.create("beans.xml"))]]></programlisting>

      <para>
         In an application that takes full advantage of CDI, you can likely get by only using injections defined with
         the <literal>@Inject</literal> annotation. Regardless, the other two types of injection come in handy from
         time-to-time.
      </para>

   </section>

   <section>
      <title>Active scopes</title>

      <para>
         When running your tests the embedded Weld SE container, Arquillian activates scopes as follows:
      </para>

      <itemizedlist>
         <listitem>
            <para>Application scope - Active for all methods in a test class</para>
         </listitem>
         <listitem>
            <para>Session scope - Active for all methods in a test class</para>
         </listitem>
         <listitem>
            <para>Request scope - Active for a single test method</para>
         </listitem>
      </itemizedlist>

      <para>
         Scope control is experimental at this point and may be altered in a future release of Arquillian.
      </para>

   </section>

<!--
vim:et:ts=3:sw=3:tw=120
-->
</chapter>
